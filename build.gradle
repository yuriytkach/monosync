plugins {
    id 'java'
    id 'io.quarkus'
    id 'jacoco'
    id 'io.freefair.lombok' version '8.3'
}

group 'com.yuriytkach'
version '1.3.0'

repositories {
    mavenCentral()
    mavenLocal()
}

ext {
    versions = [
            poi    : '5.2.3',
            mockito: '5.5.0',
    ]
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-rest-client'
    implementation 'io.quarkus:quarkus-rest-client-jackson'
    implementation 'io.quarkus:quarkus-picocli'

    implementation 'one.util:streamex:0.8.2'
    implementation 'org.apache.commons:commons-lang3:3.13.0'

    implementation "org.apache.poi:poi:${versions.poi}"
    implementation "org.apache.poi:poi-ooxml:${versions.poi}"
    implementation 'xerces:xercesImpl:2.12.2'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation "io.quarkus:quarkus-jacoco"
    testImplementation ('io.quarkus:quarkus-junit5-mockito') {
        exclude group: 'org.mockito', module: 'mockito-subclass'
    }
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"
    testImplementation "org.assertj:assertj-core:3.24.2"

    integrationTestImplementation sourceSets.test.output
    integrationTestImplementation "org.awaitility:awaitility:4.2.0"
    integrationTestImplementation 'com.github.tomakehurst:wiremock-jre8:3.0.1'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
    finalizedBy jacocoTestReport
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    testLogging {
        events "passed", "skipped", "failed"
    }
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
    }
}

jacocoTestReport {
    executionData fileTree(dir: project.projectDir, includes: ['**/*.exec'])
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn quarkusIntTest
quarkusIntTest.mustRunAfter test

[compileJava, compileTestJava].forEach {
    it -> it.dependsOn(compileQuarkusGeneratedSourcesJava, compileQuarkusTestGeneratedSourcesJava)
}
